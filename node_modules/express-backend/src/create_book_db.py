import requests
from bs4 import BeautifulSoup
import re
import zipfile
import io
import pymongo
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def get_mongo_uri(dbname):
    connection_string = f"mongodb://localhost:27017/{dbname}"
    mongo_user = os.getenv("MONGO_USER")
    mongo_pwd = os.getenv("MONGO_PWD")
    mongo_cluster = os.getenv("MONGO_CLUSTER")

    if mongo_user and mongo_pwd and mongo_cluster:
        print("Connecting to MongoDB at", f"mongodb+srv://{mongo_user}:<password>@{mongo_cluster}/{dbname}")
        connection_string = f"mongodb+srv://{mongo_user}:{mongo_pwd}@{mongo_cluster}/{dbname}?retryWrites=true&w=majority"
    else:
        print("Connecting to MongoDB at", connection_string)

    return connection_string

def connect(dbname):
    client = pymongo.MongoClient(get_mongo_uri(dbname))
    return client[dbname], client  # Return both the database object and the client object

# Connect to MongoDB
db, client = connect("ReadingClassics")

# Access the MongoDB collection (You would insert documents into this collection)
collection = db["books"]

# Function to search for a book on Project Gutenberg and retrieve its ID
def search_book_id(book_title, author):
    # Construct the search URL
    search_url = f"https://www.gutenberg.org/ebooks/search/?query={book_title.replace(' ', '+')}+{author.replace(' ', '+')}"
    # Send a GET request to the search URL
    response = requests.get(search_url)
    # Parse the HTML content of the page
    soup = BeautifulSoup(response.content, 'html.parser')
    # Find the first search result link
    search_result_link = soup.find('li', class_='booklink')
    if search_result_link:
        # Extract the book ID from the search result link
        book_id = re.search(r'/ebooks/(\d+)', search_result_link.find('a')['href']).group(1)
        return book_id, True
    else:
        return None, False

# Function to get the download link for the zipped HTML file
def get_html_download_link(book_id):
    # Construct the URL for the book on Project Gutenberg
    book_url = f"https://www.gutenberg.org/ebooks/{book_id}"
    # Send a GET request to the book's URL
    response = requests.get(book_url)
    # Parse the HTML content of the page
    soup = BeautifulSoup(response.content, 'html.parser')
    # Find the section with the download links
    download_section = soup.find('div', id='download')
    # Find the link for the zipped HTML file
    html_download_link = download_section.find('a', href=re.compile(r'.*\.zip'))
    if html_download_link:
        return 'https://www.gutenberg.org' + html_download_link['href']
    else:
        return None

# Function to download the zipped HTML file
def download_html_zip(html_zip_url):
    # Send a GET request to the HTML zip file URL
    response = requests.get(html_zip_url)
    # Read the content of the zip file
    zip_content = io.BytesIO(response.content)
    # Extract HTML content from the zip file
    with zipfile.ZipFile(zip_content, 'r') as z:
        # Assuming there is only one HTML file in the zip archive
        html_file = z.namelist()[0]
        # Read the HTML content
        html_content = z.read(html_file)
    return html_content

# Main function to extract and download the unzipped HTML file for a list of books
def main(books):
    for book_title, author in books:
        # Search for the book on Project Gutenberg and retrieve its ID
        book_id, found = search_book_id(book_title, author)
        if found:
            # Get the download link for the zipped HTML file
            html_zip_url = get_html_download_link(book_id)
            if html_zip_url:
                # Download the zipped HTML file
                html_content = download_html_zip(html_zip_url)
                # Insert book data into MongoDB
                book_data = {
                    "title": book_title,
                    "author": author,
                    "html_content": html_content
                }
                collection.insert_one(book_data)
                print(f'Unzipped HTML content for "{book_title}" by {author} inserted into MongoDB.')
            else:
                print(f'Zipped HTML download link not found for "{book_title}" by {author}.')
        else:
            print(f'Book "{book_title}" by {author} not found on Project Gutenberg.')

if __name__ == "__main__":
    # List of books with their titles and authors
    books = [
        ("The Picture of Dorian Gray", "Oscar Wilde"),
        # Add more books as needed, following the format ("Book Title", "Author Name")
    ]
    main(books)
